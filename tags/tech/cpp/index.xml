<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tech/Cpp on Manchey Blog</title>
    <link>http://localhost:1313/tags/tech/cpp/</link>
    <description>Recent content in Tech/Cpp on Manchey Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>© Manchey Lee 2024</copyright>
    <lastBuildDate>Wed, 25 Dec 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/tech/cpp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CGraph调研</title>
      <link>http://localhost:1313/posts/2024/12/cgraph%E8%B0%83%E7%A0%94/</link>
      <pubDate>Wed, 25 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2024/12/cgraph%E8%B0%83%E7%A0%94/</guid>
      <description>&lt;p&gt;repo：https://github.com/ChunelFeng/CGraph&lt;/p&gt;&#xA;&lt;h2 id=&#34;功能&#34;&gt;&#xA;  功能&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8a%9f%e8%83%bd&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;建立依赖图关系gpipelinegnodet00t01&#34;&gt;&#xA;  建立依赖图关系：GPipeline、GNode（T00/T01）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%bb%ba%e7%ab%8b%e4%be%9d%e8%b5%96%e5%9b%be%e5%85%b3%e7%b3%bbgpipelinegnodet00t01&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一条 pipeline 是从头执行到尾的，其实是 graph 的概念，没有流水线的功能&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;status &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; pipeline&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;registerGElement&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;MyNode2&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;b, {a}, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nodeB&amp;#34;&lt;/span&gt;);    &lt;span style=&#34;color:#75715e&#34;&gt;// 将名为nodeB，依赖a执行的node信息，注册入pipeline中&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;子图cluster--region类似-subgraph互相可嵌套t02t03t04&#34;&gt;&#xA;  子图：Cluster / Region：类似 subgraph，互相可嵌套（T02/T03/T04）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ad%90%e5%9b%becluster--region%e7%b1%bb%e4%bc%bc-subgraph%e4%ba%92%e7%9b%b8%e5%8f%af%e5%b5%8c%e5%a5%97t02t03t04&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;cluster：subgraph 中的多个节点串行执行&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.chunel.cn/archives/cgraph-run-introduce&#34;&gt;http://www.chunel.cn/archives/cgraph-run-introduce&lt;/a&gt;&#xA;&lt;img src=&#34;assets/Pasted%20image%2020241225154105.png&#34; alt=&#34;|434&#34; /&gt;&#xA;&lt;img src=&#34;assets/Pasted%20image%2020241225154201.png&#34; alt=&#34;|588&#34; /&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;这个解释感觉有点奇怪，D/F 未能并行执行是实现机制的问题，感觉不需要引入新的概念来解决。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;region：可以是 DAG 图&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;b_cluster &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipeline&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;createGGroup&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;GCluster&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;({&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9; pipeline&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;createGNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;MyNode1&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(GNodeInfo(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nodeB1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)),    &lt;span style=&#34;color:#75715e&#34;&gt;// 创建名为nodeB1的node信息，并将其放入b_cluster中&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#x9; pipeline&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;createGNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;MyNode1&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(GNodeInfo(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nodeB2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)),    &lt;span style=&#34;color:#75715e&#34;&gt;// 创建名为nodeB2且自循环3次的node信息，并将其放入b_cluster中&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#x9; pipeline&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;createGNode&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;MyNode2&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(GNodeInfo(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nodeB3&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});    &lt;span style=&#34;color:#75715e&#34;&gt;// 创建cluster信息，包含了三个node信息&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    b_region &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pipeline&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;createGGroup&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;GRegion&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;({b1, b2, b3, b4});    &lt;span style=&#34;color:#75715e&#34;&gt;// 将 b1、b2、b3、b4 注册入b_region中&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;参数传递param-t05&#34;&gt;&#xA;  参数传递：param (T05)&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%82%e6%95%b0%e4%bc%a0%e9%80%92param-t05&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;相当于是一个 map，同一个 pipeline 中各个节点共享的全局参数。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 创建&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CGRAPH_CREATE_GPARAM(MyParam, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;param1&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 读取&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; myParam &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CGRAPH_GET_GPARAM_WITH_NO_EMPTY(MyParam, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;param1&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 写入&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;CGRAPH_PARAM_WRITE_CODE_BLOCK(myParam)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;条件选择condition-t06&#34;&gt;&#xA;  条件选择：Condition （T06）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%9d%a1%e4%bb%b6%e9%80%89%e6%8b%a9condition-t06&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;根据 &lt;code&gt;choose&lt;/code&gt; 返回值，来决定下一步运行哪一个节点。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Taskflow如何工作</title>
      <link>http://localhost:1313/posts/2024/12/taskflow%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C/</link>
      <pubDate>Thu, 12 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2024/12/taskflow%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C/</guid>
      <description>&lt;h2 id=&#34;运行机制&#34;&gt;&#xA;  运行机制&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%bf%90%e8%a1%8c%e6%9c%ba%e5%88%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;executor&#34;&gt;&#xA;  Executor&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#executor&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;构造函数，可以看出来它的成员：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;N 个线程&lt;/li&gt;&#xA;&lt;li&gt;N 个 Worker，每个 Worker 一个线程&lt;/li&gt;&#xA;&lt;li&gt;Notifier，负责线程之间通知的&lt;/li&gt;&#xA;&lt;li&gt;Latch，负责主线程和 Worker 线程的初始化的同步的&lt;/li&gt;&#xA;&lt;li&gt;FreeList，一个有锁队列，主线程提交任务时就会往这里填充，或者 Worker 线程提交任务时，发现 Worker 自己的队列满了就往 FreeList 提交&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img src=&#34;assets/2024-12-12%20Taskflow%e5%a6%82%e4%bd%95%e5%b7%a5%e4%bd%9c@e9a1f7b6-7efa-4839-8e6d-f4cf815545dc.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;Executor 的构造函数中初始化了 thread local 的 Worker，创建 N 个线程，每个线程是一个 while(1)，等待 task、执行 task。&lt;/p&gt;&#xA;&lt;p&gt;Executor::Executor(size_t N) -》_spawn(N)：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;assets/2024-12-12%20Taskflow%e5%a6%82%e4%bd%95%e5%b7%a5%e4%bd%9c@e73c0e09-2f76-420e-8348-680d212f3345.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;assets/2024-12-12%20Taskflow%e5%a6%82%e4%bd%95%e5%b7%a5%e4%bd%9c@93169a2e-e0cf-4880-94ea-7669e182048d.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;Executor 也是有两级的链表：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;第一级是 Executor 会有以及，它是无界、lock-free 队列（Push 有锁，但是 Steal 是无锁的，也就是说适合单生产者 - 多消费者场景）：Freelist&amp;lt;Node*&amp;gt; _freelist;&lt;/li&gt;&#xA;&lt;li&gt;第二级是每个 Worker 都有一个有界的、lock-free 队列：BoundedTaskQueue&amp;lt;Node*&amp;gt; _wsq;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Executor 的 run 函数，会将没有 depends 的 node 直接放入到 freelist 中，这样整个 graph 就可以运转起来了：&lt;/p&gt;</description>
    </item>
    <item>
      <title>bazel单元测试覆盖率报告</title>
      <link>http://localhost:1313/posts/2024/10/bazel%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E8%A6%86%E7%9B%96%E7%8E%87%E6%8A%A5%E5%91%8A/</link>
      <pubDate>Tue, 22 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2024/10/bazel%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E8%A6%86%E7%9B%96%E7%8E%87%E6%8A%A5%E5%91%8A/</guid>
      <description>&lt;h1 id=&#34;流程&#34;&gt;&#xA;  流程&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b5%81%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;build-file&#34;&gt;&#xA;  BUILD file&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#build-file&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cc_test(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mutex_test&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    srcs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test_mutex.cpp&amp;#34;&lt;/span&gt;],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    deps &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:mutex_lib&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@gtest//:gtest_main&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@gtest//:gtest&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    copts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-g&amp;#34;&lt;/span&gt;],  &lt;span style=&#34;color:#75715e&#34;&gt;# Optional: include debug symbols for better coverage report&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;编译运行&#34;&gt;&#xA;  编译运行&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bc%96%e8%af%91%e8%bf%90%e8%a1%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bazel coverage --combined_report&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;lcov &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;               --action_env&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;COVERAGE_GCOV_OPTIONS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;-b &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;               --collect_code_coverage &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;               --instrument_test_targets &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;               --cache_test_results&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;no &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;               --sandbox_writable_path&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/ &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;               --instrumentation_filter&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;//src:... &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;       //...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;code&gt;--combined_report=lcov&lt;/code&gt;&lt;/strong&gt; :&#xA;&lt;ul&gt;&#xA;&lt;li&gt;指定生成的覆盖率报告格式为 LCOV，这是一个广泛使用的文本格式，便于进一步处理和可视化。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;code&gt;--action_env=COVERAGE_GCOV_OPTIONS=-b&lt;/code&gt;&lt;/strong&gt; :&#xA;&lt;ul&gt;&#xA;&lt;li&gt;设置环境变量 &lt;code&gt;COVERAGE_GCOV_OPTIONS&lt;/code&gt;，并传递 &lt;code&gt;-b&lt;/code&gt; 选项给 &lt;code&gt;gcov&lt;/code&gt;。&lt;code&gt;-b&lt;/code&gt; 选项用于告诉 &lt;code&gt;gcov&lt;/code&gt; 包含分支信息，有助于生成更详细的覆盖率数据。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;code&gt;--collect_code_coverage&lt;/code&gt;&lt;/strong&gt; :&#xA;&lt;ul&gt;&#xA;&lt;li&gt;启用代码覆盖率收集，确保 Bazel 在运行测试时生成必要的覆盖率数据。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;code&gt;--instrument_test_targets&lt;/code&gt;&lt;/strong&gt; :&#xA;&lt;ul&gt;&#xA;&lt;li&gt;确保所有测试目标在执行时都被插装，以便收集覆盖率信息。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;code&gt;--cache_test_results=no&lt;/code&gt;&lt;/strong&gt; :&#xA;&lt;ul&gt;&#xA;&lt;li&gt;禁用测试结果缓存。这意味着每次运行测试时，Bazel 都会重新执行测试，而不是使用之前的结果。这在调试和覆盖率分析时特别有用。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;code&gt;--sandbox_writable_path=/&lt;/code&gt;&lt;/strong&gt; :&#xA;&lt;ul&gt;&#xA;&lt;li&gt;指定在沙箱中可写的路径。这个选项允许测试在沙箱环境中写入指定的路径，通常用于需要写入文件的测试。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;code&gt;--instrumentation_filter=//src:...&lt;/code&gt;&lt;/strong&gt; :&#xA;&lt;ul&gt;&#xA;&lt;li&gt;设定插装过滤器，指示 Bazel 仅对匹配该模式的目标进行插装。在这里，&lt;code&gt;//src:...&lt;/code&gt; 表示所有在 &lt;code&gt;src&lt;/code&gt; 目录下的目标。可以帮助限制覆盖率分析的范围。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;ps: 如果依赖LD_LIBRARY_PATH才能运行，可以通过：&lt;code&gt;--test_env=LD_LIBRARY_PATH=$LD_LIBRARY_PATH&lt;/code&gt; 来添加&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mediapipe如何运转</title>
      <link>http://localhost:1313/posts/2024/08/mediapipe%E5%A6%82%E4%BD%95%E8%BF%90%E8%BD%AC/</link>
      <pubDate>Fri, 09 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2024/08/mediapipe%E5%A6%82%E4%BD%95%E8%BF%90%E8%BD%AC/</guid>
      <description>&lt;h2 id=&#34;mediapipe-的版本&#34;&gt;&#xA;  Mediapipe 的版本&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mediapipe-%e7%9a%84%e7%89%88%e6%9c%ac&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;0.8.0&lt;/p&gt;&#xA;&lt;h2 id=&#34;mediapipe-的基本概念&#34;&gt;&#xA;  Mediapipe 的基本概念&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mediapipe-%e7%9a%84%e5%9f%ba%e6%9c%ac%e6%a6%82%e5%bf%b5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;参考：&lt;a href=&#34;80_work/2024-06-17-Mediapipe%e8%b0%83%e7%a0%94.md&#34;&gt;2024-06-17-Mediapipe调研&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;mediapipe-有几个线程&#34;&gt;&#xA;  Mediapipe 有几个线程？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mediapipe-%e6%9c%89%e5%87%a0%e4%b8%aa%e7%ba%bf%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;编译了 example 的 hello world，发现只有两类线程：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;主线程，main 函数的线程，这个不用说了&lt;/li&gt;&#xA;&lt;li&gt;Executor 线程，Mediapipe 默认只有一个 Executtor：ThreadPoolExecutor&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;mediapipe/framework/calculator_graph.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;mediapipe/framework/port/logging.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;mediapipe/framework/port/parse_text_proto.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;mediapipe/framework/port/status.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; mediapipe {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;mediapipe&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Status PrintHelloWorld() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Configures a simple graph, which concatenates 2 PassThroughCalculators.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  CalculatorGraphConfig config &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ParseTextProtoOrDie&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;CalculatorGraphConfig&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(R&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    input_stream: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;in&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    output_stream: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;out&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    node {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      calculator: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PassThroughCalculator&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      input_stream: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;in&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      output_stream: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;out1&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    node {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      calculator: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PassThroughCalculator&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      input_stream: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;out1&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      output_stream: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;out&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  CalculatorGraph graph;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  MP_RETURN_IF_ERROR(graph.Initialize(config));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ASSIGN_OR_RETURN(OutputStreamPoller poller,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   graph.AddOutputStreamPoller(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;out&amp;#34;&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  MP_RETURN_IF_ERROR(graph.StartRun({}));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Give 10 input packets that contains the same std::string &amp;#34;Hello World!&amp;#34;.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    MP_RETURN_IF_ERROR(graph.AddPacketToInputStream(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;in&amp;#34;&lt;/span&gt;, MakePacket&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;).At(Timestamp(i))));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Close the input stream &amp;#34;in&amp;#34;.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  MP_RETURN_IF_ERROR(graph.CloseInputStream(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;in&amp;#34;&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  mediapipe&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Packet packet;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Get the output packets std::string.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (poller.Next(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;packet)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Test: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    LOG(ERROR) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; packet.Get&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; graph.WaitUntilDone();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}  &lt;span style=&#34;color:#75715e&#34;&gt;// namespace mediapipe&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; argv) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;main: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  google&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;InitGoogleLogging(argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  CHECK(mediapipe&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;PrintHelloWorld().ok());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;threadpoolexecutor-的实现&#34;&gt;&#xA;  ThreadPoolExecutor 的实现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#threadpoolexecutor-%e7%9a%84%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;它就是一个简单的 ThreadPool，提供一个 Schedule 的函数用于提交 task，内部有一个 tasks 的队列，Schedule 将 task 放入 tasks 的队列，ThreadPool 内部可以有多个 WorkerThread，从 tasks 队列中取任务（tasks 有锁保护）。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CyberRT调度调研</title>
      <link>http://localhost:1313/posts/2024/07/cyberrt%E8%B0%83%E5%BA%A6%E8%B0%83%E7%A0%94/</link>
      <pubDate>Wed, 24 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2024/07/cyberrt%E8%B0%83%E5%BA%A6%E8%B0%83%E7%A0%94/</guid>
      <description>&lt;h2 id=&#34;背景需求目的&#34;&gt;&#xA;  背景&amp;amp;需求&amp;amp;目的&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%83%8c%e6%99%af%e9%9c%80%e6%b1%82%e7%9b%ae%e7%9a%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h2 id=&#34;方案&#34;&gt;&#xA;  方案&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%96%b9%e6%a1%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用户接口：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主要：Component + TimerComponent&lt;/li&gt;&#xA;&lt;li&gt;额外：Reader callback, Async&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;任务图搭建：通过 channel 组成 DAG，提供 AllLatest 数据同步策略&lt;/li&gt;&#xA;&lt;li&gt;调度：ClassicScheduler + ChoreographyScheduler，用协程包装用户任务&lt;/li&gt;&#xA;&lt;li&gt;通信：intra + shm + dds，非在线模式 blocker&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;用户接口任务类型&#34;&gt;&#xA;  用户接口（任务类型）&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%94%a8%e6%88%b7%e6%8e%a5%e5%8f%a3%e4%bb%bb%e5%8a%a1%e7%b1%bb%e5%9e%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;数据驱动任务-component&#34;&gt;&#xA;  数据驱动任务 Component&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e9%a9%b1%e5%8a%a8%e4%bb%bb%e5%8a%a1-component&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;代码中写明类型，实现自己的初始化、数据处理、反初始化（可选）逻辑&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;配置文件中指定 channel 名称&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CommonComponentSample&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Component&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Driver, Driver&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; Init() &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Proc&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Driver&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; msg0,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Driver&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; msg1) &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CYBER_REGISTER_COMPONENT(CommonComponentSample)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-JSON&#34; data-lang=&#34;JSON&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;components&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;class_name&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;CommonComponentSample&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;config&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;common&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;readers&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;channel:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;/apollo/prediction&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;readers&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;channel:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;/apollo/test&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;时间驱动任务-timercomponent&#34;&gt;&#xA;  时间驱动任务 TimerComponent&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%97%b6%e9%97%b4%e9%a9%b1%e5%8a%a8%e4%bb%bb%e5%8a%a1-timercomponent&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;代码中实现定时处理逻辑&lt;/p&gt;</description>
    </item>
    <item>
      <title>Taskflow调研</title>
      <link>http://localhost:1313/posts/2024/06/taskflow%E8%B0%83%E7%A0%94/</link>
      <pubDate>Fri, 28 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2024/06/taskflow%E8%B0%83%E7%A0%94/</guid>
      <description>&lt;p&gt;taskflow 还在持续更新中，本文分析基于 25cb83b6688362d4b9b41f48a072607b76ee044d 版本&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;assets/2024-06-28%20Taskflow%e8%b0%83%e7%a0%94@56ee7d61-2e63-4f2a-9ec2-f9fbfa6fa126.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;背景需求motivation&#34;&gt;&#xA;  背景&amp;amp;需求&amp;amp;Motivation&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%83%8c%e6%99%af%e9%9c%80%e6%b1%82motivation&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Taskflow 作者：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Dr. Tsung-Wei Huang from：Department of Electrical and Computer Engineering University of Utah&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;目标：高效的并行计算加速框架。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;开发高效&lt;/li&gt;&#xA;&lt;li&gt;运行高效&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;assets/7f6d2d6b0417aea3e438ae8dd8ceffc0_MD5.png&#34; alt=&#34;&#34; /&gt;&lt;img src=&#34;assets/0ca38ef7bf3f2f1102f52209069a19d3_MD5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;header only 库，核心代码不到 1w 行，c++17 标准，使用 c++20 有优化&lt;/p&gt;&#xA;&lt;h2 id=&#34;解决方案&#34;&gt;&#xA;  解决方案&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;任务流水线搭建&#34;&gt;&#xA;  任务流水线搭建&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%bb%e5%8a%a1%e6%b5%81%e6%b0%b4%e7%ba%bf%e6%90%ad%e5%bb%ba&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;dag-框架搭建&#34;&gt;&#xA;  DAG 框架搭建&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#dag-%e6%a1%86%e6%9e%b6%e6%90%ad%e5%bb%ba&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Taskflow：任务图&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Task/Node：节点，代表一个任务，没有数据传递的封装，手动指定依赖关系&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://rqk9rsooi4.feishu.cn/space/api/box/stream/download/asynccode/?code=ZjNjN2M5ZmZhZGI5MDRiMzBiOTNlNjczZTY5YTI4NmZfNFc5a3Fid1NqUE90cXFxSk9pQ1ZxSHhZbDJiZlJRdVFfVG9rZW46S0dSbmI1dmFJbzF3Vnl4OEg2SWNSQUxObnBlXzE3MzUxMzkxNzY6MTczNTE0Mjc3Nl9WNA&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;任务分类&#34;&gt;&#xA;  任务分类&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%bb%e5%8a%a1%e5%88%86%e7%b1%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;static task：&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;assets/2024-06-28%20Taskflow%e8%b0%83%e7%a0%94@87a54ee2-b89b-4611-a17c-3e4c96831a9f.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;condition task&lt;/strong&gt;：可以条件执行，动态选择 0~N 个后继节点&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;assets/2024-06-28%20Taskflow%e8%b0%83%e7%a0%94@341b3dea-40b0-42b2-b84b-582599a77ae2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;subflow task&lt;/strong&gt;：运行过程中动态构建新的任务图&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;assets/2024-06-28%20Taskflow%e8%b0%83%e7%a0%94@b7e99278-3dc5-4d86-a871-0c97ba2364b9.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;module task&lt;/strong&gt;：一个 taskflow 可以作为另一个 taskflow 中的 task&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mediapipe调研</title>
      <link>http://localhost:1313/posts/2024/06/mediapipe%E8%B0%83%E7%A0%94/</link>
      <pubDate>Mon, 17 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2024/06/mediapipe%E8%B0%83%E7%A0%94/</guid>
      <description>&lt;h2 id=&#34;背景--需求&#34;&gt;&#xA;  背景 &amp;amp; 需求&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%83%8c%e6%99%af--%e9%9c%80%e6%b1%82&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;google 推出的设备端机器学习任务框架：核心模型 + 任务流水线&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;assets/99_%e6%9c%aa%e5%bd%92%e6%a1%a3@2024-06-17%20Mediapipe%e8%b0%83%e7%a0%94@e55347ce-4c15-4827-babc-e1078aeafc09.png&#34; alt=&#34;|665&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;需求：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;方便、高效的任务流水线搭建&lt;/li&gt;&#xA;&lt;li&gt;资源调配与硬件加速，异构并行&amp;amp;同步&lt;/li&gt;&#xA;&lt;li&gt;跨平台部署：iOS/安卓/Web/嵌入式&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;mediapipe-的解决方案&#34;&gt;&#xA;  Mediapipe 的解决方案&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mediapipe-%e7%9a%84%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;任务流水线搭建&#34;&gt;&#xA;  任务流水线搭建&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%bb%e5%8a%a1%e6%b5%81%e6%b0%b4%e7%ba%bf%e6%90%ad%e5%bb%ba&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;graphcalculatorstream-等概念组成的任务流框架&#34;&gt;&#xA;    graph、calculator、stream 等概念组成的任务流框架&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#graphcalculatorstream-%e7%ad%89%e6%a6%82%e5%bf%b5%e7%bb%84%e6%88%90%e7%9a%84%e4%bb%bb%e5%8a%a1%e6%b5%81%e6%a1%86%e6%9e%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;calculator：算子，也称为 node&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;port：node 的输入输出端口&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;stream：node 之间的数据通路&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;graph：任务图&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;packet：数据包，timestamp + shared pointer to immutable payload&#xA;&lt;img src=&#34;assets/2024-06-17%20Mediapipe%e8%b0%83%e7%a0%94-20241225191258182-%7bMD5%7d.png&#34; alt=&#34;|654&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;目前不支持动态调整 graph 结构&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;inputoutput&#34;&gt;&#xA;    input/output&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#inputoutput&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;inputsource-nodes-input-streams&#34;&gt;&#xA;    input：source nodes 、input streams&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#inputsource-nodes-input-streams&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;source nodes：可以自行产生数据的节点，比如读文件、camera 输入&lt;/li&gt;&#xA;&lt;li&gt;input streams：由用户将输入给到 graph&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;outputsink-nodesoutput-streams&#34;&gt;&#xA;    output：sink nodes、output streams&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#outputsink-nodesoutput-streams&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;sink nodes：只有输入没有输出的节点，消耗数据，比如写文件等&lt;/li&gt;&#xA;&lt;li&gt;output streams：用户从 graph 中拿到输出结果&lt;/li&gt;&#xA;&lt;li&gt;callback 形式&lt;/li&gt;&#xA;&lt;li&gt;polling 形式&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;多源输入数据的同步&#34;&gt;&#xA;    多源输入数据的同步&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%a4%9a%e6%ba%90%e8%be%93%e5%85%a5%e6%95%b0%e6%8d%ae%e7%9a%84%e5%90%8c%e6%ad%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;&lt;img src=&#34;assets/2024-06-17%20Mediapipe%e8%b0%83%e7%a0%94-20241225191256752-%7bMD5%7d.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>c&#43;&#43;模板分享</title>
      <link>http://localhost:1313/posts/2024/01/c-%E6%A8%A1%E6%9D%BF%E5%88%86%E4%BA%AB/</link>
      <pubDate>Sun, 14 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2024/01/c-%E6%A8%A1%E6%9D%BF%E5%88%86%E4%BA%AB/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.yuque.com/attachments/yuque/0/2024/pptx/34951004/1705561090412-c384c966-e607-4231-8b3f-64e3cff125b1.pptx&#34;&gt;c++templates基础 - 20240118.pptx&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;为什么需要模版&#34;&gt;&#xA;  为什么需要模版&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%b8%ba%e4%bb%80%e4%b9%88%e9%9c%80%e8%a6%81%e6%a8%a1%e7%89%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;assets/2024-01-14-c&amp;#43;&amp;#43;%e6%a8%a1%e6%9d%bf%e5%88%86%e4%ba%ab@bc2c37aa-46d0-42b1-ab29-cf28090ac1fa.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;bad-old-days&#34;&gt;&#xA;  Bad Old Days&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#bad-old-days&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;reuse-with-cut-n-paste&#34;&gt;&#xA;  Reuse with cut-N-paste&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#reuse-with-cut-n-paste&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;int_node&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    int_node&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;  next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; value;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;int_list&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    int_node&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;  front;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    int_node&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;  back;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;int_list_append&lt;/span&gt;(int_list&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; l, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; val);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;int_list_prepend&lt;/span&gt;(int_list&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; l, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; val);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;int_list_clear&lt;/span&gt;(int_list&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; l);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;double_node&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;double_node&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;  next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;        value;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;double_list&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;double_node&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;  front;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;double_node&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;  back;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;dbl_list_append&lt;/span&gt;(int_list&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; l, &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; val);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;dbl_list_prepend&lt;/span&gt;(int_list&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; l, &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; val);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;dbl_list_clear&lt;/span&gt;(int_list&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; l);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;reuse-with-type-erasure&#34;&gt;&#xA;  Reuse with Type Erasure&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#reuse-with-type-erasure&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;qsort&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;base, size_t nmemb, size_t size,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;compare)(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cmp_dbl&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; va, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; vb)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) va);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;((&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) vb);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; b)       &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; b) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;             &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; dbl_data[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#ae81ff&#34;&gt;3.14159&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1.41421&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2.71828&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1.61803&lt;/span&gt; };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    qsort(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;dbl_data[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;4u&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;), &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;cmp_dbl); &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;reuse-with-macros&#34;&gt;&#xA;  Reuse with Macros&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#reuse-with-macros&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define BUILD_COMPARE(TYPE)                          \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    int cmp_ ## TYPE(const void* va, const void* vb) \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    {                                                \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;      TYPE const* pa = static_cast&amp;lt;TYPE const*&amp;gt;(va); \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;      TYPE const* pb = static_cast&amp;lt;TYPE const*&amp;gt;(vb); \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;      if (*pa &amp;lt; *pb) return -1;                      \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;      else if (*pa == *pb) return 0;                 \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;      else return 1;                                 \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;BUILD_COMPARE(&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;BUILD_COMPARE(&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; h()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; data[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#ae81ff&#34;&gt;4.0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3.0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2.0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt; }; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    qsort(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;data[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;4u&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;), &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;cmp_float); &lt;span style=&#34;color:#75715e&#34;&gt;//- OK &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    qsort(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;data[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;4u&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt;), &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;cmp_dbl); &lt;span style=&#34;color:#75715e&#34;&gt;//- Error&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;code-reuse&#34;&gt;&#xA;  Code Reuse&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#code-reuse&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;These problems have been around a long time&lt;/li&gt;&#xA;&lt;li&gt;In the 1970&amp;rsquo;s, some languages began allowing algorithms to be written in terms of types to-be-specified-later&lt;/li&gt;&#xA;&lt;li&gt;Algorithms were then instantiated on demand using type arguments&lt;/li&gt;&#xA;&lt;li&gt;This approach is now known as &lt;strong&gt;generic programming:&#xA;****&#x9;C++ supports generic programming with templates&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;模版基础&#34;&gt;&#xA;  模版基础&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a8%a1%e7%89%88%e5%9f%ba%e7%a1%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;分类&#34;&gt;&#xA;  分类&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%86%e7%b1%bb&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;thing-template&#34;&gt;&#xA;  &lt;em&gt;thing&lt;/em&gt; template&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#thing-template&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;This kind of template &amp;hellip; is a parametrized description of a family of &amp;hellip;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
