<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tech/Bazel on Manchey Blog</title>
    <link>http://localhost:1313/tags/tech/bazel/</link>
    <description>Recent content in Tech/Bazel on Manchey Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>© Manchey Lee 2024</copyright>
    <lastBuildDate>Tue, 26 Nov 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/tech/bazel/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>bazel编译go项目</title>
      <link>http://localhost:1313/posts/2024/11/bazel%E7%BC%96%E8%AF%91go%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Tue, 26 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2024/11/bazel%E7%BC%96%E8%AF%91go%E9%A1%B9%E7%9B%AE/</guid>
      <description>&lt;h1 id=&#34;bazel编译项目&#34;&gt;&#xA;  bazel编译项目&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#bazel%e7%bc%96%e8%af%91%e9%a1%b9%e7%9b%ae&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;go相关代码改bazel编译&#34;&gt;&#xA;  Go相关代码，改bazel编译&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#go%e7%9b%b8%e5%85%b3%e4%bb%a3%e7%a0%81%e6%94%b9bazel%e7%bc%96%e8%af%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;gazelle生成各个buildbazel&#34;&gt;&#xA;  gazelle生成各个BUILD.bazel&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#gazelle%e7%94%9f%e6%88%90%e5%90%84%e4%b8%aabuildbazel&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;添加gazelle&#34;&gt;&#xA;  添加gazelle&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b7%bb%e5%8a%a0gazelle&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;gazelle是用来自动生成go项目bazel BUILD的工具。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;deps.bzl：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    http_archive&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bazel_gazelle&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        integrity &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sha256-12v3pg/YsFBEQJDfooN6Tq+YKeEWVhjuNdzspcvfWNU=&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        urls &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://mirror.bazel.build/github.com/bazelbuild/bazel-gazelle/releases/download/v0.37.0/bazel-gazelle-v0.37.0.tar.gz&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://github.com/bazelbuild/bazel-gazelle/releases/download/v0.37.0/bazel-gazelle-v0.37.0.tar.gz&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;总的BUILD中添加：&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;load&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@bazel_gazelle//:def.bzl&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gazelle&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# gazelle:prefix code.deeproute.ai/cloud-infra/c01-fota&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gazelle&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gazelle&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;添加高版本buildtools&#34;&gt;&#xA;  添加高版本buildtools&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b7%bb%e5%8a%a0%e9%ab%98%e7%89%88%e6%9c%acbuildtools&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;gazelle和bazelbuild/buildtools有冲突，也是版本问题，依赖的buildtools比较新，已有的旧。加了一个新的。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;assets/087af734722b35487d0ebe06962aa40f_MD5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/bazelbuild/buildtools/blame/main/build/BUILD.bazel#L11C14-L11C14&#34;&gt;https://github.com/bazelbuild/buildtools/blame/main/build/BUILD.bazel#L11C14-L11C14&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;运行生成各个go项目的build&#34;&gt;&#xA;  运行，生成各个go项目的BUILD&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%bf%90%e8%a1%8c%e7%94%9f%e6%88%90%e5%90%84%e4%b8%aago%e9%a1%b9%e7%9b%ae%e7%9a%84build&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bazel run //:gazelle&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;proto报错&#34;&gt;&#xA;  proto报错&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#proto%e6%8a%a5%e9%94%99&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ERROR: /workspace/monorepo/c01-fota/pkg/os-bridge/BUILD.bazel:18:11: GoCompilePkg pkg/os-bridge/os-bridge.a failed: &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Exit 1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: builder failed: error executing command bazel-out/k8-opt-exec-2B5CBBC6/bin/external/go_sdk/builder_reset/builder compilepkg -sdk external/go_sdk -installsuffix linux_amd64 -src ... &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;remaining &lt;span style=&#34;color:#ae81ff&#34;&gt;69&lt;/span&gt; arguments skipped&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Use --sandbox_debug to see verbose messages from the sandbox and retain the sandbox build root &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; debugging&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pkg/os-bridge/os-bridge.go:33:33: cannot use &amp;amp;message &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;value of type *Message&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; as &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;code.deeproute.ai/cloud-infra/c01-fota/vendor/google.golang.org/protobuf/reflect/protoreflect&amp;#34;&lt;/span&gt;.ProtoMessage value in argument to proto.Marshal: *Message does not implement &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;code.deeproute.ai/cloud-infra/c01-fota/vendor/google.golang.org/protobuf/reflect/protoreflect&amp;#34;&lt;/span&gt;.ProtoMessage &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;wrong type &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; method ProtoReflect&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                have ProtoReflect&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;google.golang.org/protobuf/reflect/protoreflect&amp;#34;&lt;/span&gt;.Message&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                want ProtoReflect&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;code.deeproute.ai/cloud-infra/c01-fota/vendor/google.golang.org/protobuf/reflect/protoreflect&amp;#34;&lt;/span&gt;.Message&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pkg/os-bridge/os-bridge.go:46:32: cannot use &amp;amp;message &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;value of type *Message&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; as &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;code.deeproute.ai/cloud-infra/c01-fota/vendor/google.golang.org/protobuf/reflect/protoreflect&amp;#34;&lt;/span&gt;.ProtoMessage value in argument to proto.Marshal: *Message does not implement &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;code.deeproute.ai/cloud-infra/c01-fota/vendor/google.golang.org/protobuf/reflect/protoreflect&amp;#34;&lt;/span&gt;.ProtoMessage &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;wrong type &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; method ProtoReflect&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                have ProtoReflect&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;google.golang.org/protobuf/reflect/protoreflect&amp;#34;&lt;/span&gt;.Message&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                want ProtoReflect&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;code.deeproute.ai/cloud-infra/c01-fota/vendor/google.golang.org/protobuf/reflect/protoreflect&amp;#34;&lt;/span&gt;.Message&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pkg/os-bridge/os-bridge.go:82:33: cannot use &amp;amp;message &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;value of type *Message&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; as &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;code.deeproute.ai/cloud-infra/c01-fota/vendor/google.golang.org/protobuf/reflect/protoreflect&amp;#34;&lt;/span&gt;.ProtoMessage value in argument to proto.Marshal: *Message does not implement &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;code.deeproute.ai/cloud-infra/c01-fota/vendor/google.golang.org/protobuf/reflect/protoreflect&amp;#34;&lt;/span&gt;.ProtoMessage &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;wrong type &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; method ProtoReflect&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                have ProtoReflect&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;google.golang.org/protobuf/reflect/protoreflect&amp;#34;&lt;/span&gt;.Message&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                want ProtoReflect&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;code.deeproute.ai/cloud-infra/c01-fota/vendor/google.golang.org/protobuf/reflect/protoreflect&amp;#34;&lt;/span&gt;.Message&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;compilepkg: error running subcommand PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/usr/bin:/bin &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;GOEXPERIMENT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;nocoverageredesign &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;CGO_ENABLED&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;GOARCH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;amd64 &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;GOPATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;GOOS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;linux &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;GOROOT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;bazel-out/k8-fastbuild-ST-b33d65c724e6/bin/external/io_bazel_rules_go/stdlib_ &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;TMPDIR&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/tmp &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;GOTOOLCHAIN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;local &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;GOROOT_FINAL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;GOROOT &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;external/go_sdk/pkg/tool/linux_amd64/compile -p code.deeproute.ai/cloud-infra/c01-fota/pkg/os-bridge -importcfg /home/jiaqili/.cache/bazel/_bazel_jiaqili/3f5ca13afad49559f8f755414e5ed340/sandbox/linux-sandbox/485/execroot/c01_fota/bazel-out/k8-fastbuild/bin/pkg/os-bridge/importcfg1326253688 -pack -trimpath&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/home/jiaqili/.cache/bazel/_bazel_jiaqili/3f5ca13afad49559f8f755414e5ed340/sandbox/linux-sandbox/485/execroot/c01_fota -o /home/jiaqili/.cache/bazel/_bazel_jiaqili/3f5ca13afad49559f8f755414e5ed340/sandbox/linux-sandbox/485/execroot/c01_fota/bazel-out/k8-fastbuild/bin/pkg/os-bridge/os-bridge.x -linkobj /home/jiaqili/.cache/bazel/_bazel_jiaqili/3f5ca13afad49559f8f755414e5ed340/sandbox/linux-sandbox/485/execroot/c01_fota/bazel-out/k8-fastbuild/bin/pkg/os-bridge/os-bridge.a -- /home/jiaqili/.cache/bazel/_bazel_jiaqili/3f5ca13afad49559f8f755414e5ed340/sandbox/linux-sandbox/485/execroot/c01_fota/bazel-out/k8-fastbuild/bin/pkg/os-bridge/bridge_go_proto_/code.deeproute.ai/cloud-infra/c01-fota/pkg/os-bridge/os-bridge.pb.go /home/jiaqili/.cache/bazel/_bazel_jiaqili/3f5ca13afad49559f8f755414e5ed340/sandbox/linux-sandbox/485/execroot/c01_fota/pkg/os-bridge/os-bridge.go: exit status &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Target //:c01-fota failed to build&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Use --verbose_failures to see the command lines of failed build steps.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;INFO: Elapsed time: 5.609s, Critical Path: 2.80s&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;INFO: &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; processes: &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; internal, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; linux-sandbox.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FAILED: Build did NOT complete successfully&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;有已经生成好了的pb.go，先直接用了，能编过。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;需要加：&lt;/p&gt;</description>
    </item>
    <item>
      <title>使用bazel编译rust项目</title>
      <link>http://localhost:1313/posts/2024/10/%E4%BD%BF%E7%94%A8bazel%E7%BC%96%E8%AF%91rust%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Sun, 27 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2024/10/%E4%BD%BF%E7%94%A8bazel%E7%BC%96%E8%AF%91rust%E9%A1%B9%E7%9B%AE/</guid>
      <description>&lt;h1 id=&#34;编译适配&#34;&gt;&#xA;  编译适配&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bc%96%e8%af%91%e9%80%82%e9%85%8d&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;主要参考：https://www.tweag.io/blog/2023-07-27-building-rust-workspace-with-bazel/&lt;/p&gt;&#xA;&lt;h2 id=&#34;1加入rules_rust&#34;&gt;&#xA;  1）加入rules_rust&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1%e5%8a%a0%e5%85%a5rules_rust&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;在WORKSPACE中加入：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;http_archive(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rules_rust&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sha256 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;36ab8f9facae745c9c9c1b33d225623d976e78f2cc3f729b7973d8c20934ab95&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    urls &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://github.com/bazelbuild/rules_rust/releases/download/0.31.0/rules_rust-v0.31.0.tar.gz&amp;#34;&lt;/span&gt;    ],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;load(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@rules_rust//rust:repositories.bzl&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rules_rust_dependencies&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rust_register_toolchains&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rules_rust_dependencies()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rust_register_toolchains()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 声明使用的rust版本，最新的是2024，我选了一个次新的&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rust_register_toolchains(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    edition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2021&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2设置外部依赖&#34;&gt;&#xA;  2）设置外部依赖&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2%e8%ae%be%e7%bd%ae%e5%a4%96%e9%83%a8%e4%be%9d%e8%b5%96&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;添加外部依赖，在WORKSPACE中添加：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;load(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@rules_rust//crate_universe:repositories.bzl&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;crate_universe_dependencies&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;crate_universe_dependencies()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;load(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@rules_rust//crate_universe:defs.bzl&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;crates_repository&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;crates_repository(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;crate_index&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cargo_lockfile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;//xxx_tool:Cargo.lock&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lockfile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;//:cargo-bazel-lock.json&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    manifests &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;//xxx_tool:Cargo.toml&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;//xxx_tool/common:Cargo.toml&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;//xxx_tool/xxx_monitor:Cargo.toml&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    generate_build_scripts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;load(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@crate_index//:defs.bzl&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;crate_repositories&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;crate_repositories()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;必须先执行一下：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;touch cargo-bazel-lock.json&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CARGO_BAZEL_REPIN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; bazel sync --only&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;crate_index&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行上述命令会读取Cargo.toml和Cargo.lock，并将依赖信息写到cargo-bazel-lock.json中，通过bazel命令可以查询具体包含了哪些依赖：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bazel query @crate_index//...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3添加target规则&#34;&gt;&#xA;  3）添加target规则&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#3%e6%b7%bb%e5%8a%a0target%e8%a7%84%e5%88%99&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;package(default_visibility &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;//visibility:public&amp;#34;&lt;/span&gt;])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;load(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@rules_rust//rust:defs.bzl&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rust_library&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rust_library(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;common&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    srcs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; glob([&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;src/**/*.rs&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ]),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    edition &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2021&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    deps &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@crate_index//:chrono&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@crate_index//:lazy_static&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@crate_index//:log&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@crate_index//:log4rs&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@crate_index//:nix&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@crate_index//:serde&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@crate_index//:tokio&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@crate_index//:uname&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    proc_macro_deps &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@crate_index//:serde_derive&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;rust-call-c编译问题&#34;&gt;&#xA;  Rust call c++编译问题&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#rust-call-c%e7%bc%96%e8%af%91%e9%97%ae%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;rust调用c++代码，一般几种方式：cxx、autocxx、bindgen&#xA;&lt;ul&gt;&#xA;&lt;li&gt;此前用的autocxx，相对来说是最方便使用的，不需要自己手动写大量的胶水层代码&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;autocxx本身目前没有现成的bazel方案，但一些开源相关工作可以参考：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;autocxx仓库的bazel PR：https://github.com/google/autocxx/pull/1255&lt;/li&gt;&#xA;&lt;li&gt;有一个开源库，自己做了autocxx的bazel集成：https://github.com/frc971/971-Robot-Code/blob/main/tools/build_rules/autocxx.bzl&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;autocxx的原理介绍：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://google.github.io/autocxx/building.html&#34;&gt;https://google.github.io/autocxx/building.html&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;重点是通过autocxx-gen工具，生成对应的cpp/rs胶水层代码并编译。&lt;/li&gt;&#xA;&lt;li&gt;之前的build.rs脚本中autocxx提供的函数其实就是封装了这一过程。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;生成过程&#34;&gt;&#xA;  生成过程&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%94%9f%e6%88%90%e8%bf%87%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;先把依赖的几个proto编译一下，把头文件生成出来。&lt;/li&gt;&#xA;&lt;li&gt;然后执行autocxx-gen&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;autocxx-gen ./xxx.rs &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;            --outdir ./test-output/ &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;            --gen-cpp &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;            --gen-rs-include &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;            --inc ./ &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;            --inc ./bazel-bin &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;参数解释：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;cpp_interface.rs：调用了c++的rust代码&lt;/li&gt;&#xA;&lt;li&gt;&amp;ndash;outdir：输出文件夹&lt;/li&gt;&#xA;&lt;li&gt;&amp;ndash;gen-cpp：指定生成c++胶水层代码&lt;/li&gt;&#xA;&lt;li&gt;&amp;ndash;gen-rs-include：指定生成rust胶水层代码&lt;/li&gt;&#xA;&lt;li&gt;&amp;ndash;inc：按需指定依赖的各个头文件路径&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>bazel单元测试覆盖率报告</title>
      <link>http://localhost:1313/posts/2024/10/bazel%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E8%A6%86%E7%9B%96%E7%8E%87%E6%8A%A5%E5%91%8A/</link>
      <pubDate>Tue, 22 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2024/10/bazel%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E8%A6%86%E7%9B%96%E7%8E%87%E6%8A%A5%E5%91%8A/</guid>
      <description>&lt;h1 id=&#34;流程&#34;&gt;&#xA;  流程&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%b5%81%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;build-file&#34;&gt;&#xA;  BUILD file&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#build-file&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cc_test(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mutex_test&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    srcs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test_mutex.cpp&amp;#34;&lt;/span&gt;],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    deps &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:mutex_lib&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@gtest//:gtest_main&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@gtest//:gtest&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    copts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-g&amp;#34;&lt;/span&gt;],  &lt;span style=&#34;color:#75715e&#34;&gt;# Optional: include debug symbols for better coverage report&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;编译运行&#34;&gt;&#xA;  编译运行&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%bc%96%e8%af%91%e8%bf%90%e8%a1%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bazel coverage --combined_report&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;lcov &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;               --action_env&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;COVERAGE_GCOV_OPTIONS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;-b &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;               --collect_code_coverage &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;               --instrument_test_targets &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;               --cache_test_results&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;no &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;               --sandbox_writable_path&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/ &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;               --instrumentation_filter&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;//src:... &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;       //...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;code&gt;--combined_report=lcov&lt;/code&gt;&lt;/strong&gt; :&#xA;&lt;ul&gt;&#xA;&lt;li&gt;指定生成的覆盖率报告格式为 LCOV，这是一个广泛使用的文本格式，便于进一步处理和可视化。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;code&gt;--action_env=COVERAGE_GCOV_OPTIONS=-b&lt;/code&gt;&lt;/strong&gt; :&#xA;&lt;ul&gt;&#xA;&lt;li&gt;设置环境变量 &lt;code&gt;COVERAGE_GCOV_OPTIONS&lt;/code&gt;，并传递 &lt;code&gt;-b&lt;/code&gt; 选项给 &lt;code&gt;gcov&lt;/code&gt;。&lt;code&gt;-b&lt;/code&gt; 选项用于告诉 &lt;code&gt;gcov&lt;/code&gt; 包含分支信息，有助于生成更详细的覆盖率数据。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;code&gt;--collect_code_coverage&lt;/code&gt;&lt;/strong&gt; :&#xA;&lt;ul&gt;&#xA;&lt;li&gt;启用代码覆盖率收集，确保 Bazel 在运行测试时生成必要的覆盖率数据。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;code&gt;--instrument_test_targets&lt;/code&gt;&lt;/strong&gt; :&#xA;&lt;ul&gt;&#xA;&lt;li&gt;确保所有测试目标在执行时都被插装，以便收集覆盖率信息。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;code&gt;--cache_test_results=no&lt;/code&gt;&lt;/strong&gt; :&#xA;&lt;ul&gt;&#xA;&lt;li&gt;禁用测试结果缓存。这意味着每次运行测试时，Bazel 都会重新执行测试，而不是使用之前的结果。这在调试和覆盖率分析时特别有用。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;code&gt;--sandbox_writable_path=/&lt;/code&gt;&lt;/strong&gt; :&#xA;&lt;ul&gt;&#xA;&lt;li&gt;指定在沙箱中可写的路径。这个选项允许测试在沙箱环境中写入指定的路径，通常用于需要写入文件的测试。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;code&gt;--instrumentation_filter=//src:...&lt;/code&gt;&lt;/strong&gt; :&#xA;&lt;ul&gt;&#xA;&lt;li&gt;设定插装过滤器，指示 Bazel 仅对匹配该模式的目标进行插装。在这里，&lt;code&gt;//src:...&lt;/code&gt; 表示所有在 &lt;code&gt;src&lt;/code&gt; 目录下的目标。可以帮助限制覆盖率分析的范围。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;ps: 如果依赖LD_LIBRARY_PATH才能运行，可以通过：&lt;code&gt;--test_env=LD_LIBRARY_PATH=$LD_LIBRARY_PATH&lt;/code&gt; 来添加&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
