<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tech/Cpp/Scheduler/Mediapipe on Manchey Blog</title>
    <link>http://localhost:1313/tags/tech/cpp/scheduler/mediapipe/</link>
    <description>Recent content in Tech/Cpp/Scheduler/Mediapipe on Manchey Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>© Manchey Lee 2024</copyright>
    <lastBuildDate>Fri, 09 Aug 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/tech/cpp/scheduler/mediapipe/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mediapipe如何运转</title>
      <link>http://localhost:1313/posts/2024/08/mediapipe%E5%A6%82%E4%BD%95%E8%BF%90%E8%BD%AC/</link>
      <pubDate>Fri, 09 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2024/08/mediapipe%E5%A6%82%E4%BD%95%E8%BF%90%E8%BD%AC/</guid>
      <description>&lt;h2 id=&#34;mediapipe-的版本&#34;&gt;&#xA;  Mediapipe 的版本&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mediapipe-%e7%9a%84%e7%89%88%e6%9c%ac&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;0.8.0&lt;/p&gt;&#xA;&lt;h2 id=&#34;mediapipe-的基本概念&#34;&gt;&#xA;  Mediapipe 的基本概念&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mediapipe-%e7%9a%84%e5%9f%ba%e6%9c%ac%e6%a6%82%e5%bf%b5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;参考：&lt;a href=&#34;80_work/2024-06-17-Mediapipe%e8%b0%83%e7%a0%94.md&#34;&gt;2024-06-17-Mediapipe调研&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;mediapipe-有几个线程&#34;&gt;&#xA;  Mediapipe 有几个线程？&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mediapipe-%e6%9c%89%e5%87%a0%e4%b8%aa%e7%ba%bf%e7%a8%8b&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;编译了 example 的 hello world，发现只有两类线程：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;主线程，main 函数的线程，这个不用说了&lt;/li&gt;&#xA;&lt;li&gt;Executor 线程，Mediapipe 默认只有一个 Executtor：ThreadPoolExecutor&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;mediapipe/framework/calculator_graph.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;mediapipe/framework/port/logging.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;mediapipe/framework/port/parse_text_proto.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;mediapipe/framework/port/status.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; mediapipe {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;mediapipe&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Status PrintHelloWorld() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Configures a simple graph, which concatenates 2 PassThroughCalculators.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  CalculatorGraphConfig config &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ParseTextProtoOrDie&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;CalculatorGraphConfig&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(R&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    input_stream: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;in&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    output_stream: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;out&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    node {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      calculator: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PassThroughCalculator&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      input_stream: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;in&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      output_stream: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;out1&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    node {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      calculator: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PassThroughCalculator&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      input_stream: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;out1&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      output_stream: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;out&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  CalculatorGraph graph;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  MP_RETURN_IF_ERROR(graph.Initialize(config));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ASSIGN_OR_RETURN(OutputStreamPoller poller,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                   graph.AddOutputStreamPoller(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;out&amp;#34;&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  MP_RETURN_IF_ERROR(graph.StartRun({}));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Give 10 input packets that contains the same std::string &amp;#34;Hello World!&amp;#34;.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    MP_RETURN_IF_ERROR(graph.AddPacketToInputStream(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;in&amp;#34;&lt;/span&gt;, MakePacket&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;).At(Timestamp(i))));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Close the input stream &amp;#34;in&amp;#34;.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  MP_RETURN_IF_ERROR(graph.CloseInputStream(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;in&amp;#34;&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  mediapipe&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;Packet packet;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Get the output packets std::string.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (poller.Next(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;packet)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Test: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    LOG(ERROR) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; packet.Get&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; graph.WaitUntilDone();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}  &lt;span style=&#34;color:#75715e&#34;&gt;// namespace mediapipe&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; argv) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;main: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  google&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;InitGoogleLogging(argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  CHECK(mediapipe&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;PrintHelloWorld().ok());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;threadpoolexecutor-的实现&#34;&gt;&#xA;  ThreadPoolExecutor 的实现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#threadpoolexecutor-%e7%9a%84%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;它就是一个简单的 ThreadPool，提供一个 Schedule 的函数用于提交 task，内部有一个 tasks 的队列，Schedule 将 task 放入 tasks 的队列，ThreadPool 内部可以有多个 WorkerThread，从 tasks 队列中取任务（tasks 有锁保护）。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mediapipe调研</title>
      <link>http://localhost:1313/posts/2024/06/mediapipe%E8%B0%83%E7%A0%94/</link>
      <pubDate>Mon, 17 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2024/06/mediapipe%E8%B0%83%E7%A0%94/</guid>
      <description>&lt;h2 id=&#34;背景--需求&#34;&gt;&#xA;  背景 &amp;amp; 需求&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e8%83%8c%e6%99%af--%e9%9c%80%e6%b1%82&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;google 推出的设备端机器学习任务框架：核心模型 + 任务流水线&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;assets/99_%e6%9c%aa%e5%bd%92%e6%a1%a3@2024-06-17%20Mediapipe%e8%b0%83%e7%a0%94@e55347ce-4c15-4827-babc-e1078aeafc09.png&#34; alt=&#34;|665&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;需求：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;方便、高效的任务流水线搭建&lt;/li&gt;&#xA;&lt;li&gt;资源调配与硬件加速，异构并行&amp;amp;同步&lt;/li&gt;&#xA;&lt;li&gt;跨平台部署：iOS/安卓/Web/嵌入式&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;mediapipe-的解决方案&#34;&gt;&#xA;  Mediapipe 的解决方案&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mediapipe-%e7%9a%84%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;任务流水线搭建&#34;&gt;&#xA;  任务流水线搭建&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%bb%e5%8a%a1%e6%b5%81%e6%b0%b4%e7%ba%bf%e6%90%ad%e5%bb%ba&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;graphcalculatorstream-等概念组成的任务流框架&#34;&gt;&#xA;    graph、calculator、stream 等概念组成的任务流框架&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#graphcalculatorstream-%e7%ad%89%e6%a6%82%e5%bf%b5%e7%bb%84%e6%88%90%e7%9a%84%e4%bb%bb%e5%8a%a1%e6%b5%81%e6%a1%86%e6%9e%b6&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;calculator：算子，也称为 node&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;port：node 的输入输出端口&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;stream：node 之间的数据通路&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;graph：任务图&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;packet：数据包，timestamp + shared pointer to immutable payload&#xA;&lt;img src=&#34;assets/2024-06-17%20Mediapipe%e8%b0%83%e7%a0%94-20241225191258182-%7bMD5%7d.png&#34; alt=&#34;|654&#34; /&gt;&lt;/p&gt;&#xA;&lt;p&gt;目前不支持动态调整 graph 结构&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;inputoutput&#34;&gt;&#xA;    input/output&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#inputoutput&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h5 id=&#34;inputsource-nodes-input-streams&#34;&gt;&#xA;    input：source nodes 、input streams&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#inputsource-nodes-input-streams&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;source nodes：可以自行产生数据的节点，比如读文件、camera 输入&lt;/li&gt;&#xA;&lt;li&gt;input streams：由用户将输入给到 graph&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;outputsink-nodesoutput-streams&#34;&gt;&#xA;    output：sink nodes、output streams&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#outputsink-nodesoutput-streams&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;sink nodes：只有输入没有输出的节点，消耗数据，比如写文件等&lt;/li&gt;&#xA;&lt;li&gt;output streams：用户从 graph 中拿到输出结果&lt;/li&gt;&#xA;&lt;li&gt;callback 形式&lt;/li&gt;&#xA;&lt;li&gt;polling 形式&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;多源输入数据的同步&#34;&gt;&#xA;    多源输入数据的同步&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%a4%9a%e6%ba%90%e8%be%93%e5%85%a5%e6%95%b0%e6%8d%ae%e7%9a%84%e5%90%8c%e6%ad%a5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;&lt;img src=&#34;assets/2024-06-17%20Mediapipe%e8%b0%83%e7%a0%94-20241225191256752-%7bMD5%7d.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
